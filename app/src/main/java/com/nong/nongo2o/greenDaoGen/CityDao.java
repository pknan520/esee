package com.nong.nongo2o.greenDaoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nong.nongo2o.entity.domain.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Void> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property City_code = new Property(0, String.class, "city_code", false, "CITY_CODE");
        public final static Property Parent_code = new Property(1, String.class, "parent_code", false, "PARENT_CODE");
        public final static Property City_name = new Property(2, String.class, "city_name", false, "CITY_NAME");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(1, city_code);
        }
 
        String parent_code = entity.getParent_code();
        if (parent_code != null) {
            stmt.bindString(2, parent_code);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(3, city_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(1, city_code);
        }
 
        String parent_code = entity.getParent_code();
        if (parent_code != null) {
            stmt.bindString(2, parent_code);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(3, city_name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // city_code
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // parent_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // city_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCity_code(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParent_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(City entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(City entity) {
        return null;
    }

    @Override
    public boolean hasKey(City entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
